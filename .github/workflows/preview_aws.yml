name: Build and deploy to preview

on:
  repository_dispatch:
    types: [dev-deploy]

  push:
    branches:
      - preview
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max_old_space_size=8192'

jobs:
  build:
    runs-on: 'ubuntu-latest'
    outputs:
      docker-image-tag: ${{ steps.generate-tag-name.outputs.docker_tag }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PWD}}

      - uses: actions/checkout@v3
        with:
          ref: 'preview'

      - name: Verify Nginx configuration
        uses: addnab/docker-run-action@v3
        with:
          image: zilliz/zilliz-web-runner
          options: -v ${{ github.workspace }}/conf/conf.d/client.conf:/etc/nginx/conf.d/client.conf
          run: |
            if nginx -t -c /etc/nginx/nginx.conf; then
              echo "Nginx configuration is valid."
            else
              echo "Nginx configuration is invalid."
              exit 1
            fi
        if: always()

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: update submodules from preview branch
        run: |
          git submodule init
          git submodule set-branch --branch preview -- src/docs
          git submodule update --remote

      - name: Generate docker image tag name
        id: generate-tag-name
        run: |
          export tag=${{ github.sha }}-$GITHUB_RUN_NUMBER
          echo $tag
          echo "docker_tag=$tag" >> $GITHUB_OUTPUT

      - name: Install dependencies and build
        run: |
          pnpm install
          pnpm run build --env=INKEEP_API_KEY=${{ secrets.INKEEP_API_KEY }} \
                        --env=REPO_STATICS_KEY=${{ secrets.REPO_STATICS_KEY }} \
                        --env=IS_PREVIEW=${{ secrets.PREVIEW_SITE }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Builder.Dockerfile
          push: true
          tags: milvusdb/milvus-io-dev:${{ steps.generate-tag-name.outputs.docker_tag }}

  deploy:
    runs-on: amazon-linux-2
    needs: build
    steps:
      - name: Deploy to cluster
        run: |
          echo ${{ secrets.kubeconfig }} > config64
          base64 -d config64 > kubeconfig
          kubectl set image deployment/milvus-io-dev milvus-io-dev=milvusdb/milvus-io-dev:${{ needs.build.outputs.docker-image-tag }} -n ued --kubeconfig=kubeconfig
