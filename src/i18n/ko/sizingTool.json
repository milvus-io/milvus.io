{
  "title": "Milvus 크기 조정 도구",
  "content": "Milvus 배포를 위한 리소스 요구 사항을 추정하고 구성을 생성하는 도구입니다.",
  "tooltip": "<0>참고</0>: 구성은 경험을 바탕으로 한 최적의 추정치이지만, 프로덕션 환경에 출시하기 전에 데이터와 트래픽 패턴으로 테스트하는 것을 권장합니다.",
  "form": {
    "num": "벡터 수",
    "dim": "벡터 차원",
    "withScalar": "스칼라 필드 포함",
    "averageLength": "행당 평균 데이터 크기",
    "offloading": "디스크로 필드 오프로딩",
    "mmp": "Milvus는 <0>Mmap</0>을 사용하여 전체 파일을 메모리로 읽어들이지 않고도 디스크에 있는 대용량 파일에 직접 메모리 접근을 가능하게 합니다.",
    "indexType": "인덱스 유형",
    "indexTypeTip": "벡터 인덱스를 어떻게 선택하나요?",
    "indexParam": "인덱스 매개변수",
    "indexParamTip": "적절한 인덱스 매개변수를 설정하는 방법은? <0>자세히 알아보기</0>.",
    "withRawData": "with_raw_data",
    "m": "M(노드의 최대 차수)",
    "nlist": "nlist",
    "maxDegree": "max_degree",
    "segmentSize": "세그먼트 크기",
    "dependencyComp": "의존성 구성 요소",
    "mode": "모드",
    "modeTip": "데이터 크기가 증가함에 따라 Standalone 모드에서 Cluster 모드로 데이터를 마이그레이션할 수 있습니다. <0>더 보기</0>.",
    "modeDisableTip": "대용량 데이터의 경우, 더 나은 성능과 확장성을 위해 클러스터 모드 배포를 권장합니다.",
    "pulsar": "Pulsar",
    "kafka": "Kafka",
    "standalone": "Standalone",
    "standaloneDesc": "소규모에서 중규모에 적합합니다.",
    "cluster": "분산형",
    "clusterDesc": "대규모에 적합합니다.",
    "segmentTooltip": "datacoord.segment.maxSize는 Milvus에서 중요한 스토리지 구성 매개변수입니다. 이 매개변수는 Milvus의 물리적 저장 단위인 단일 세그먼트의 크기를 정의합니다. 이 값을 높이면 쿼리 성능이 향상될 수 있지만 리소스도 더 많이 소모됩니다. <0>자세히 보기.</0>"
  },
  "overview": {
    "title": "리소스 요구 사항",
    "explore": "관리형 서비스 비용 탐색",
    "overview": "데이터 크기 계산",
    "raw": "원시 데이터 크기: ",
    "rawTooltip": "벡터 수, 벡터 차원 및 스칼라 필드 데이터 크기에 의해 결정되는 원본 데이터의 크기입니다.",
    "memory": "로딩 메모리: ",
    "memoryTooltip": "쿼리 노드의 메모리 소비량으로, 원시 데이터 크기, 인덱스 유형 및 쿼리 노드의 매개변수에 의해 결정됩니다."
  },
  "setup": {
    "title": "리소스 요구 사항 설정",
    "cloud": "관리형 서비스 비용 탐색",
    "outOfRange": "대량의 데이터가 있습니다. 배포를 위한 최적의 방법을 탐색하려면 <0>문의하세요</0>.",
    "milvus": {
      "title": "Milvus",
      "proxy": "프록시",
      "mixCoord": "Mix Coord",
      "dataNode": "데이터 노드",
      "indexNode": "인덱스 노드",
      "queryNode": "쿼리 노드",
      "diskSize": "<0>로컬 디스크</0>: <1>{{size}}</1>",
      "proxyTip": "프록시는 시스템의 접근 계층이자 사용자를 위한 엔드포인트입니다. 팁: 더 높은 QPS 작업 부하를 처리하기 위해 더 많은 리소스를 할당하세요.",
      "mixCoordTip": "Mix coord는 클러스터 백그라운드 작업을 스케줄링하고, 메타데이터 토폴로지를 유지하며, DDL, DCL 및 TSO 할당을 처리합니다.",
      "queryNodeTip": "쿼리 노드는 데이터 쿼리 및 검색을 담당합니다. 팁: 읽기 작업이 많은 부하를 처리하기 위해 더 많은 리소스를 할당하세요.",
      "dataNodeTip": "데이터 노드는 로그 브로커에 구독하여 증분 로그 데이터를 검색하고, 변이 요청을 처리하며, 로그 데이터를 로그 스냅샷으로 패키징하여 객체 저장소에 저장합니다. 팁: 쓰기 작업이 많은 부하를 처리하기 위해 더 많은 리소스를 할당하세요.",
      "indexNodeTip": "인덱스 노드는 인덱스 구축을 담당합니다. 리소스 양은 인덱스 구축 속도에 영향을 미칠 수 있습니다. 실제 필요에 따라 이 리소스를 늘리거나 줄일 수 있습니다.",
      "standaloneNode": "Standalone 노드",
      "streamNode": "스트림 노드",
      "streamNodeTip": "스트리밍 노드는 모든 스트리밍 작업을 처리합니다. 리소스 수는 증가하는 데이터 검색, 데이터 쓰기, wal에서 binlog로의 데이터 변환(스트리밍 데이터에서 기록 데이터로의 변환) 등 모든 스트리밍 작업의 처리량과 지연 시간에 직접적인 영향을 미칩니다."
    },
    "dependency": {
      "title": "의존성",
      "etcd": "ETCD",
      "minio": "Minio",
      "pulsar": "Pulsar",
      "kafka": "Kafka",
      "bookie": "Bookie",
      "broker": "Broker",
      "proxy": "프록시",
      "zookeeper": "Zookeeper",
      "etcdTip": "ETCD는 메타 데이터를 저장하는 데 사용됩니다. 최적의 성능을 보장하기 위해 고성능 디스크 스토리지 클래스를 지정하세요.",
      "apacheTip": "Bookie.Journal 및 Zookeeper에 대해 고성능 디스크 스토리지 클래스를 지정하여 최적의 성능을 보장하세요.",
      "kafkaTip": "Zookeeper에 대해 고성능 디스크 스토리지 클래스를 지정하여 최적의 성능을 보장하세요."
    },
    "basic": {
      "cpuAndMemory": "CPU 및 메모리: <0>{{cpu}} {{memory}}</0>",
      "storageWithValue": "스토리지: <0>{{size}}</0>",
      "diskWithValue": "로컬 디스크: <0>{{disk}}</0>",
      "cpu": "CPU",
      "memory": "메모리",
      "disk": "로컬 디스크",
      "storage": "스토리지",
      "podNum": "Pod 수",
      "pvc": "Pod당 Pvc: <0>{{pvc}}</0>",
      "pvcLabel": "Pod당 Pvc",
      "journal": "Journal",
      "ledger": "Ledgers",
      "config": "{{cpu}} 코어 {{memory}} GB",
      "core": "{{cpu}} 코어",
      "simpleCore": "{{cpu}} C",
      "gb": "{{memory}} GB",
      "byte": "바이트"
    }
  },
  "install": {
    "title": "Milvus 설치",
    "helm": "Helm 차트",
    "operator": "Milvus Operator",
    "docker": "Docker Compose",
    "adv": "너무 많은 리소스를 소모하나요? Zilliz Cloud(관리형 Milvus)를 사용하여 리소스를 절약하고 배포 및 운영 비용을 절감하세요. Zilliz Cloud 계산기에서 더 많은 세부 정보를 확인하세요. <0>Zilliz Cloud 계산기로 이동</0>.",
    "adv2": "성능 테스트 또는 벤치마킹을 위해 Milvus 클러스터를 설정하시나요? <0>VDB Bench</0>에서 자세한 가이드를 참조하세요.",
    "tip1": "Docker Compose로 Milvus를 실행하는 방법은?",
    "tip2": "Helm 차트로 Milvus를 실행하는 방법은?",
    "tip3": "Milvus Operator로 Milvus를 실행하는 방법은?"
  },
  "woodpeckerTip": "<0>딱따구리는</0> 모든 스트리밍 작업을 처리할 책임이 있습니다. 리소스 수는 증가하는 데이터 검색, 데이터 쓰기, wal에서 binlog로의 데이터 변환(스트리밍 데이터에서 기록 데이터로의 변환) 등 모든 스트리밍 작업의 처리량과 지연 시간에 직접적인 영향을 미칩니다."
}
