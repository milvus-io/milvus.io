import classes from './index.module.less';
import clsx from 'clsx';

export const PulsarIcon = (props: { color?: string }) => {
  return (
    <svg
      width="29"
      height="29"
      viewBox="0 0 29 29"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M26.2612 12.3318H20.8851C19.4319 9.49725 17.8941 7.29492 15.8017 7.29492C13.0776 7.29492 11.7991 9.71147 10.5616 12.0653L10.4538 12.2717H4.26123V13.6694H7.86842C9.14184 13.6694 9.40115 14.1057 9.40115 14.1057C8.40243 15.6836 7.20089 17.2433 5.19833 17.2433H4.26123V18.7089H5.20603C9.08793 18.7089 10.7824 15.506 12.1431 12.9353C13.3909 10.5658 14.2613 9.1315 15.8042 9.1315C17.4063 9.1315 19.0905 12.6766 20.5719 15.8064C20.7875 16.261 21.0083 16.726 21.2317 17.1884C15.5475 17.3713 12.8389 18.7245 10.6361 19.8296C9.02374 20.6369 7.75032 21.6375 5.65533 21.6375H4.26123V23.1057H5.64249C8.16624 23.1057 9.74005 22.3141 11.414 21.4729C13.7324 20.313 16.3613 18.9989 22.559 18.9989H26.1406V17.5306H24.1174C23.9505 17.5437 23.7837 17.5176 23.6297 17.4523C23.4756 17.3896 23.337 17.2903 23.2266 17.1623C22.8722 16.4648 22.5256 15.7307 22.1868 14.9965L21.7169 14.0195C21.7169 14.0195 22.0533 13.6537 22.9826 13.6537H26.2612V12.3318Z"
        fill={props.color || '#00131A'}
      />
    </svg>
  );
};

export const KafkaIcon = (props: { color?: string }) => {
  return (
    <svg
      width="29"
      height="29"
      viewBox="0 0 29 29"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12.3293 6.26078C12.1099 6.03923 11.8039 5.90241 11.4637 5.90241C11.1248 5.90241 10.8212 6.03923 10.6045 6.26078H10.5982C10.3795 6.48125 10.2434 6.78905 10.2434 7.1297C10.2434 7.47164 10.3795 7.77684 10.5982 7.99602L10.6045 8.00099C10.8212 8.22146 11.1248 8.35699 11.4637 8.35699C11.8039 8.35699 12.1099 8.22146 12.3293 8.00099L12.3325 7.99602C12.5523 7.77684 12.6871 7.47164 12.6871 7.1297C12.6871 6.78905 12.5523 6.48125 12.3325 6.26078H12.3293ZM11.4637 23.0605C11.8039 23.0605 12.1099 22.9213 12.3293 22.7034L12.3325 22.6969C12.5523 22.4795 12.6871 22.1717 12.6871 21.8334C12.6871 21.4915 12.5523 21.185 12.3325 20.9634H12.3293C12.1099 20.7393 11.8039 20.6037 11.4637 20.6037C11.1248 20.6037 10.8212 20.7393 10.6045 20.9634H10.5982C10.3795 21.185 10.2434 21.4915 10.2434 21.8334C10.2434 22.1717 10.3795 22.4795 10.5982 22.6969L10.6045 22.7034C10.8212 22.9213 11.1248 23.0605 11.4637 23.0605ZM18.1161 19.3423C18.4187 19.2625 18.6926 19.0674 18.8597 18.7723L18.8823 18.7293C19.0309 18.4494 19.058 18.1265 18.9786 17.8403C18.8986 17.5338 18.7021 17.2627 18.4092 17.0931L18.3922 17.0816C18.1069 16.9245 17.7817 16.8903 17.483 16.9714C17.1794 17.0475 16.9068 17.2513 16.7405 17.5439C16.5722 17.8338 16.5369 18.1682 16.6175 18.476C16.7007 18.7786 16.8954 19.0522 17.1863 19.2232H17.1882C17.4798 19.3916 17.8101 19.4221 18.1161 19.3423ZM12.7168 13.2238C12.3959 12.9022 11.9538 12.7007 11.4637 12.7007C10.9756 12.7007 10.5346 12.9022 10.2144 13.2238C9.89569 13.5443 9.69915 13.9877 9.69915 14.479C9.69915 14.9716 9.89569 15.4162 10.2144 15.7404C10.5346 16.0594 10.9756 16.2596 11.4637 16.2596C11.9538 16.2596 12.3959 16.0594 12.7168 15.7404C13.0361 15.4162 13.2326 14.9716 13.2326 14.479C13.2326 13.9877 13.0361 13.5443 12.7168 13.2238ZM12.0123 11.1319C12.7224 11.2495 13.3612 11.5914 13.8487 12.0853H13.8526C13.93 12.1638 14.0057 12.2487 14.0756 12.3348L15.2946 11.6258C15.1308 11.128 15.1232 10.6075 15.2548 10.1199C15.4288 9.46626 15.8503 8.88115 16.4821 8.51391L16.5029 8.50137C17.1278 8.14538 17.8383 8.07189 18.4797 8.24675C19.1292 8.4214 19.7151 8.847 20.0798 9.48161V9.4829C20.4428 10.1136 20.5166 10.8379 20.3433 11.489C20.1706 12.1422 19.7472 12.7312 19.116 13.0958L18.9496 13.1948H18.9326C18.3488 13.4745 17.7067 13.5177 17.1171 13.3619C16.6328 13.2326 16.1885 12.9616 15.8408 12.5753L14.6237 13.2821C14.7635 13.6544 14.8411 14.056 14.8411 14.479C14.8411 14.9007 14.7635 15.3072 14.6237 15.682L15.8408 16.3863C16.1885 15.995 16.6328 15.7289 17.1171 15.5997C17.7665 15.4212 18.4866 15.4972 19.116 15.8658L19.1562 15.8848V15.8874C19.7644 16.257 20.1725 16.8296 20.3433 17.4754C20.5166 18.1226 20.4428 18.8471 20.0798 19.4791L20.0579 19.5234L20.0553 19.5195C19.6906 20.1289 19.116 20.5417 18.4817 20.7164C17.8308 20.8886 17.1108 20.8151 16.4821 20.4518V20.4466C15.8503 20.0794 15.4288 19.493 15.2548 18.8408C15.1232 18.3545 15.1308 17.8338 15.2946 17.3362L14.0756 16.6294C14.0057 16.7157 13.93 16.7967 13.8526 16.8752L13.8487 16.8789C13.3612 17.3704 12.7224 17.7123 12.0123 17.8262V19.2422C12.5183 19.3486 12.9718 19.6032 13.3272 19.9603L13.329 19.9642C13.8053 20.4403 14.1001 21.1039 14.1001 21.8334C14.1001 22.5605 13.8053 23.22 13.329 23.6988L13.3272 23.7063C12.8477 24.1851 12.1895 24.4814 11.4637 24.4814C10.7419 24.4814 10.0828 24.1851 9.60453 23.7063H9.60281V23.6988C9.12586 23.22 8.8304 22.5605 8.8304 21.8334C8.8304 21.1039 9.12586 20.4403 9.60281 19.9642V19.9603H9.60453C9.95934 19.6032 10.4135 19.3486 10.9182 19.2422V17.8262C10.2075 17.7123 9.57056 17.3704 9.08371 16.8789L9.07855 16.8752C8.47 16.2609 8.0896 15.4162 8.0896 14.479C8.0896 13.5443 8.47 12.6996 9.07855 12.0853H9.08371C9.57056 11.5914 10.2075 11.2495 10.9182 11.1319V9.72218C10.4135 9.61194 9.95934 9.35754 9.60453 9.00284H9.60281V8.99895C9.12586 8.5178 8.8304 7.8592 8.8304 7.1297C8.8304 6.40387 9.12586 5.739 9.60281 5.26023L9.60453 5.25785C10.0828 4.77778 10.7419 4.48145 11.4637 4.48145C12.1895 4.48145 12.8477 4.77778 13.3272 5.25785V5.26023H13.329C13.8053 5.739 14.1001 6.40387 14.1001 7.1297C14.1001 7.8592 13.8053 8.5178 13.329 8.99895L13.3272 9.00284C12.9718 9.35754 12.5183 9.61194 12.0123 9.72218V11.1319ZM18.8597 10.1921L18.8496 10.177C18.6812 9.89186 18.4129 9.70186 18.1161 9.61951C17.8101 9.53845 17.4798 9.57282 17.1863 9.7412H17.1882C16.8954 9.90828 16.6995 10.1819 16.6175 10.4884C16.5369 10.7923 16.5722 11.128 16.7405 11.4205L16.7461 11.4282C16.9149 11.7168 17.1833 11.9105 17.483 11.9889C17.7843 12.0739 18.12 12.0384 18.4092 11.8688L18.4249 11.8612C18.7096 11.6902 18.8993 11.4205 18.9786 11.1241C19.0593 10.8189 19.0272 10.4845 18.8597 10.1921Z"
        fill={props.color || '#00131A'}
      />
    </svg>
  );
};

export const DataCard = (props: {
  name: React.ReactNode;
  data: string;
  desc?: React.ReactNode;
  count?: number | string;
  classname?: string;
  size?: string;
  isOutOfCalculate?: boolean;
}) => {
  const {
    name,
    data,
    count,
    desc,
    classname = '',
    size = 'medium',
    isOutOfCalculate = false,
  } = props;
  return (
    <div className={clsx(classes.dataCard, classname)}>
      <div
        className={clsx(
          'text-[12px] leading-[18px] font-[400] text-black2 mb-[4px]',
          {
            [classes.largeName]: size === 'large',
          }
        )}
      >
        {name}
      </div>
      <p
        className={clsx('text-[12px] leading-[18px] font-[500] text-black1', {
          [classes.largeData]: size === 'large',
        })}
      >
        {isOutOfCalculate ? '--' : data}
      </p>
      {desc && (
        <div className="text-[12px] leading-[18px] font-[400] text-black2">
          {desc}
        </div>
      )}
      {count && (
        <p className="text-[12px] leading-[18px] font-[500] text-black1 mt-[6px]">
          {isOutOfCalculate ? '--' : `x ${count}`}
        </p>
      )}
    </div>
  );
};
