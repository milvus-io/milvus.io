import React, { useMemo, useRef } from 'react';
import Head from 'next/head';
import { useTranslation } from 'react-i18next';
import Layout from '../../components/layout/commonLayout';
import Tags from '../../components/tags';
import BlogCard from '../../components/card/BlogCard';
import dayjs from 'dayjs';
import Share from '../../components/share';
import styles from '../../styles/blogDetail.module.less';
import blogUtils from '../../utils/blog.utils';
import { markdownToHtml } from '../../utils/common';
import clsx from 'clsx';
import BlogAnchorSection from '../../parts/blogs/blogAnchors';
import pageClasses from '../../styles/responsive.module.less';
import { ABSOLUTE_BASE_URL } from '@/consts';
import { useCopyCode } from '../../hooks/enhanceCodeBlock';
import 'highlight.js/styles/atom-one-dark.css';

export default function Template(props) {
  const {
    locale,
    newHtml,
    author,
    date,
    tags,
    title,
    id,
    desc,
    cover,
    anchorList,
    codeList,
    moreBlogs,
  } = props;

  const docContainer = useRef(null);
  const { t } = useTranslation('common');

  // remove special tag generated by remarkable
  const html = newHtml.replace(/<custom-h1>.*?<\/custom-h1>/gs, '');

  const shareUrl = useMemo(() => `${ABSOLUTE_BASE_URL}/blog/${id}`, [id]);

  const dateTime = useMemo(() => dayjs(date).format('MMMM DD, YYYY'), [date]);

  useCopyCode(codeList);

  const handleTagClick = tag => {
    navigate(`/blog?page=1#${tag}`);
  };

  const metaTitle = `${title} - Milvus Blog`;

  const homeIcon = (
    <svg
      width="16"
      height="17"
      viewBox="0 0 16 17"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M7.03277 2.8535C7.59146 2.38217 8.40854 2.38217 8.96723 2.8535L13.4672 6.64986C13.8051 6.93487 14 7.35436 14 7.79636V14.3317C14 14.976 13.4777 15.4983 12.8333 15.4983H10.8333C10.189 15.4983 9.66667 14.976 9.66667 14.3317V10.9983C9.66667 10.7222 9.44281 10.4983 9.16667 10.4983H6.83333C6.55719 10.4983 6.33333 10.7222 6.33333 10.9983V14.3317C6.33333 14.976 5.811 15.4983 5.16667 15.4983H3.16667C2.52233 15.4983 2 14.976 2 14.3317V7.79636C2 7.35436 2.19494 6.93487 2.53277 6.64986L7.03277 2.8535Z"
      />
    </svg>
  )

  const sepIcon = (
    <svg xmlns="http://www.w3.org/2000/svg" width="13" height="12" viewBox="0 0 13 12" fill="none">
      <path d="M4.955 9L4.25 8.295L6.54 6L4.25 3.705L4.955 3L7.955 6L4.955 9Z" fill="#2E373B"/>
    </svg>
  )

  return (
    <main>
      <Layout t={t}>
        <Head>
          <title>{metaTitle}</title>
          <meta name="description" content={desc} />
          <meta property="og:title" content={metaTitle} />
          <meta property="og:description" content={desc} />
          <meta property="og:url" content={shareUrl} />
          <meta property="og:image" content={`https://${cover}`} />
          <link rel="alternate" href={shareUrl} hrefLang="en" />
          <link
            rel="stylesheet"
            href="https://assets.zilliz.com/katex/katex.min.css"
          />
        </Head>
        <div>
          <div className={clsx(pageClasses.docContainer, styles.upLayout)}>
            <section className={styles.blogHeader}>
              <p className={styles.breadcrumb}>
                <a href="https://milvus.io">
                  {/* { homeIcon } */}
                  Home
                </a>
                { sepIcon }
                <a href="/blog">Blogs</a>
                { sepIcon }
                {title}
              </p>

              <h1 className={styles.title}>{title}</h1>

              <div className={styles.subTitle}>
                <Tags
                  list={tags}
                  tagsClass={styles.tags}
                  onClick={handleTagClick}
                />
                <div className={styles.subTitleSeparator} />
                <span className={ styles.date }>{dateTime}</span>
                <div className={styles.subTitleSeparator} />
                {author && <span className={ styles.author }>{author}</span>}
              </div>
            </section>

            <section className={styles.blogContent}>
              <div
                className={clsx(
                  'doc-style',
                  'scroll-padding',
                  styles.articleContainer
                )}
                ref={docContainer}
                dangerouslySetInnerHTML={{ __html: html }}
              ></div>

              <div className={styles.anchorsContainer}>
                <BlogAnchorSection
                  anchors={anchorList}
                  shareUrl={shareUrl}
                  title={title}
                  description={desc}
                  container={docContainer}
                  imgUrl={`https://${cover}`}
                  id={id}
                  classes={{
                    root: styles.anchorContainer,
                  }}
                />
              </div>
            </section>

            <section className={styles.mobileShareSection}>
              <p>Like the article? Spread the word</p>
              <Share
                url={shareUrl}
                quote={title}
                desc={desc}
                image={cover}
                wrapperClass={styles.share}
                vertical={false}
              />
            </section>
          </div>

          <section className={clsx(pageClasses.docContainer, styles.bottomLayout)}>
            
            <h2 className={styles.title}>Keep Reading</h2>
            <ul className={styles.blogCards}>
              {moreBlogs.map((v, index) => {
                const { desc, cover, date, tags, title, id } = v;
                return (
                  <li key={index}>
                    <BlogCard
                      locale={locale}
                      title={title}
                      date={date}
                      cover={cover}
                      desc={desc}
                      tags={tags}
                      path={id}
                      direction='row'
                      disableWrapperLink={true}
                    />
                  </li>
                );
              })}
            </ul>
          </section>
        </div>
      </Layout>
    </main>
  );
}

export const getStaticPaths = () => {
  const paths = blogUtils.getRouter();

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async ({ locale = 'en', params }) => {
  const { id } = params;
  const allData = blogUtils.getAllData();

  const { content, tags, ...rest } = allData.find(v => v.id === id);

  const { tree, codeList, anchorList } = await markdownToHtml(content, {
    showAnchor: true,
    version: 'blog',
    useLatex: true,
  });
  return {
    props: {
      locale,
      newHtml: tree,
      anchorList: anchorList.filter(item => item.label !== rest.title),
      codeList,
      moreBlogs: allData
        .filter(v => v.tags.some(tag => tags.includes(tag) && v.id !== id))
        .slice(0, 4),
      tags,
      ...rest,
    },
  };
};
