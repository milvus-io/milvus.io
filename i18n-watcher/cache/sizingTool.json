{
  "title": "Milvus Sizing Tool",
  "titleV250": "Milvus Sizing Tool for Milvus v2.5.x",
  "content": "A tool for estimating resource requirements and generating a configuration for your Milvus deployment.",
  "previousVersion": "Previous version of the sizing tool is <0>here</0>.",
  "tooltip": "<0>Note</0>: the config is our best estimation based on the experience but we suggest to test with your data and traffic pattern before launching to production.",
  "woodpeckerTip": "<0>Woodpecker</0> is a cloud-native write-ahead log (WAL) system since Milvus 2.6.0. It is designed to replace Kafka and Pulsar as MQ in Milvus to simplify operations, maximize throughput, and scale effortlessly. For now it is running embedded in the streaming nodes.",
  "form": {
    "num": "Number of Vectors",
    "dim": "Vector Dimension",
    "withScalar": "With Scalar Fields",
    "averageLength": "Average Data Size Per Row",
    "offloading": "Offloading Fields to Disk",
    "mmp": "Milvus uses <0>Mmap</0> to enable direct memory access to large files on disk without reading the entire files into memory.",
    "indexType": "Index Type",
    "indexTypeTip": "How to choose vector index?",
    "indexParam": "Index Parameters",
    "indexParamTip": "How to set proper index parameters? <0>learn more details</0>.",
    "withRawData": "with_raw_data",
    "m": "M(Maximum degree of the node)",
    "nlist": "nlist",
    "maxDegree": "max_degree",
    "segmentSize": "Segment Size",
    "segmentTooltip": "datacoord.segment.maxSize is an important storage configuration parameter in Milvus. It defines the size of a single segment, which is the physical storage unit in Milvus. Increasing this value can improve query performance, but it will also consume more resources. <0>View More.</0>",
    "dependencyComp": "Dependency Component",
    "mode": "Mode",
    "modeTip": "As your data size grows, you can migrate data from the Standalone mode to the Cluster mode. <0>View More</0>.",
    "modeDisableTip": "For large data sizes, it is recommended to use cluster mode deployment to achieve better performance and scalability.",
    "pulsar": "Pulsar",
    "kafka": "Kafka",
    "standalone": "Standalone",
    "standaloneDesc": "Suitable for small to medium scale.",
    "cluster": "Distributed",
    "clusterDesc": "Suitable for large scale.",
    "refine": "Refine",
    "refineType": "Refine Type"
  },
  "overview": {
    "title": "Resource Requirements",
    "explore": "Explore Managed Service Cost",
    "overview": "Data Size Calculation",
    "raw": "Raw Data Size: ",
    "rawTooltip": "The size of the original data which is determined by the number of vectors, vector dimension, and the scalar field data size.",
    "memory": "Loading Memory: ",
    "memoryTooltip": "Memory consumption for query nodes which is determined by the raw data size, index type, and params for query nodes."
  },
  "setup": {
    "title": "Setup Resource Requirements",
    "cloud": "Explore Managed Service Cost",
    "outOfRange": "You have a large amount of data. Please <0>contact us</0> to explore the best practices for deployment.",
    "milvus": {
      "title": "Milvus",
      "proxy": "Proxy",
      "mixCoord": "Mix Coord",
      "dataNode": "Data Node",
      "indexNode": "Index Node",
      "queryNode": "Query Node",
      "streamNode": "Stream Node",
      "diskSize": "<0>Local Disk</0>: <1>{{size}}</1>",
      "proxyTip": "Proxy is the access layer of the system and endpoint for users. Tips: Allocate more resources to handle higher QPS workload.",
      "mixCoordTip": "Mix coord is responsible for scheduling cluster background tasks, maintaining metadata topology, handling DDL, DCL, and TSO allocation.",
      "queryNodeTip": "Query node is responsible for data query and search. Tips: Allocate more resources to handle read-heavy workload. ",
      "dataNodeTip": "Data node retrieves incremental log data by subscribing to the log broker, processes mutation requests, and packs log data into log snapshots and stores them in the object storage. Tips: Allocate more resources to handle write-heavy workload.",
      "indexNodeTip": "Index node is responsible for building indexes. The amount of resources may affect the speed of index building. You can increase or decrease this resource according to actual needs.",
      "standaloneNode": "Standalone Node",
      "streamNodeTip": "The StreamingNode is responsible for handling all streaming tasks. The number of resources directly affects Milvus's throughput and latency for all streaming operations, including growing data search, data writing, data convention from wal to binlog (streaming data to historical data)."
    },
    "dependency": {
      "title": "Dependency",
      "etcd": "ETCD",
      "minio": "Minio",
      "pulsar": "Pulsar",
      "kafka": "Kafka",
      "bookie": "Bookie",
      "broker": "Broker",
      "proxy": "Proxy",
      "zookeeper": "Zookeeper",
      "etcdTip": "ETCD is used to store meta data. Please specify a high-disk-performance storage class  to ensure optimal performance.",
      "apacheTip": "Please specify a high-disk-performance storage class for Bookie.Journal and Zookeeper to ensure optimal performance.",
      "kafkaTip": "Please specify a high-disk-performance storage class for Zookeeper to ensure optimal performance."
    },
    "basic": {
      "cpuAndMemory": "CPU and Memory: <0>{{cpu}} {{memory}}</0>",
      "storageWithValue": "Storage: <0>{{size}}</0>",
      "diskWithValue": "Local Disk: <0>{{disk}}</0>",
      "cpu": "CPU",
      "memory": "Memory",
      "disk": "Local Disk",
      "storage": "Storage",
      "podNum": "Pod Number",
      "pvc": "Pvc per Pod: <0>{{pvc}}</0>",
      "pvcLabel": "Pvc per Pod",
      "journal": "Journal",
      "ledger": "Ledgers",
      "config": "{{cpu}} Core {{memory}} GB",
      "core": "{{cpu}} Core",
      "simpleCore": "{{cpu}} C",
      "gb": "{{memory}} GB",
      "byte": "Bytes"
    }
  },
  "install": {
    "title": "Install Milvus",
    "helm": "Helm Chart",
    "operator": "Milvus Operator",
    "docker": "Docker Compose",
    "adv": "Too many resources consumed? Try Zilliz Cloud (managed Milvus) to save resources and cut deployment and operation costs. Check out more details with the Zilliz Cloud calculator. <0>Go to Zilliz Cloud calculator</0>.",
    "adv2": "Setting up a Milvus cluster for performance testing or benchmarking? Refer to <0>VDB Bench</0> for detailed guidance.",
    "tip1": "How to run Milvus with Docker Compose?",
    "tip2": "How to run Milvus with Helm Chart?",
    "tip3": "How to run Milvus with Milvus Operator?"
  }
}
